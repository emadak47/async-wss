// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod atrimo {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod pricing_events {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PricingEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PricingEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PricingEvent<'a> {
  type Inner = PricingEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PricingEvent<'a> {
  pub const VT_BEST_BID: flatbuffers::VOffsetT = 4;
  pub const VT_BEST_ASK: flatbuffers::VOffsetT = 6;
  pub const VT_WORSE_ASK: flatbuffers::VOffsetT = 8;
  pub const VT_WORSE_BID: flatbuffers::VOffsetT = 10;
  pub const VT_EXECUTION_BID: flatbuffers::VOffsetT = 12;
  pub const VT_EXECUTION_ASK: flatbuffers::VOffsetT = 14;
  pub const VT_DEPTH: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PricingEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PricingEventArgs
  ) -> flatbuffers::WIPOffset<PricingEvent<'bldr>> {
    let mut builder = PricingEventBuilder::new(_fbb);
    builder.add_depth(args.depth);
    builder.add_execution_ask(args.execution_ask);
    builder.add_execution_bid(args.execution_bid);
    builder.add_worse_bid(args.worse_bid);
    builder.add_worse_ask(args.worse_ask);
    builder.add_best_ask(args.best_ask);
    builder.add_best_bid(args.best_bid);
    builder.finish()
  }


  #[inline]
  pub fn best_bid(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_BEST_BID, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn best_ask(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_BEST_ASK, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn worse_ask(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_WORSE_ASK, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn worse_bid(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_WORSE_BID, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn execution_bid(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_EXECUTION_BID, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn execution_ask(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(PricingEvent::VT_EXECUTION_ASK, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn depth(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(PricingEvent::VT_DEPTH, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PricingEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f32>("best_bid", Self::VT_BEST_BID, false)?
     .visit_field::<f32>("best_ask", Self::VT_BEST_ASK, false)?
     .visit_field::<f32>("worse_ask", Self::VT_WORSE_ASK, false)?
     .visit_field::<f32>("worse_bid", Self::VT_WORSE_BID, false)?
     .visit_field::<f32>("execution_bid", Self::VT_EXECUTION_BID, false)?
     .visit_field::<f32>("execution_ask", Self::VT_EXECUTION_ASK, false)?
     .visit_field::<u64>("depth", Self::VT_DEPTH, false)?
     .finish();
    Ok(())
  }
}
pub struct PricingEventArgs {
    pub best_bid: f32,
    pub best_ask: f32,
    pub worse_ask: f32,
    pub worse_bid: f32,
    pub execution_bid: f32,
    pub execution_ask: f32,
    pub depth: u64,
}
impl<'a> Default for PricingEventArgs {
  #[inline]
  fn default() -> Self {
    PricingEventArgs {
      best_bid: 0.0,
      best_ask: 0.0,
      worse_ask: 0.0,
      worse_bid: 0.0,
      execution_bid: 0.0,
      execution_ask: 0.0,
      depth: 0,
    }
  }
}

pub struct PricingEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PricingEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_best_bid(&mut self, best_bid: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_BEST_BID, best_bid, 0.0);
  }
  #[inline]
  pub fn add_best_ask(&mut self, best_ask: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_BEST_ASK, best_ask, 0.0);
  }
  #[inline]
  pub fn add_worse_ask(&mut self, worse_ask: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_WORSE_ASK, worse_ask, 0.0);
  }
  #[inline]
  pub fn add_worse_bid(&mut self, worse_bid: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_WORSE_BID, worse_bid, 0.0);
  }
  #[inline]
  pub fn add_execution_bid(&mut self, execution_bid: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_EXECUTION_BID, execution_bid, 0.0);
  }
  #[inline]
  pub fn add_execution_ask(&mut self, execution_ask: f32) {
    self.fbb_.push_slot::<f32>(PricingEvent::VT_EXECUTION_ASK, execution_ask, 0.0);
  }
  #[inline]
  pub fn add_depth(&mut self, depth: u64) {
    self.fbb_.push_slot::<u64>(PricingEvent::VT_DEPTH, depth, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PricingEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PricingEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PricingEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PricingEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PricingEvent");
      ds.field("best_bid", &self.best_bid());
      ds.field("best_ask", &self.best_ask());
      ds.field("worse_ask", &self.worse_ask());
      ds.field("worse_bid", &self.worse_bid());
      ds.field("execution_bid", &self.execution_bid());
      ds.field("execution_ask", &self.execution_ask());
      ds.field("depth", &self.depth());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PricingEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pricing_event_unchecked`.
pub fn root_as_pricing_event(buf: &[u8]) -> Result<PricingEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PricingEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PricingEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_pricing_event_unchecked`.
pub fn size_prefixed_root_as_pricing_event(buf: &[u8]) -> Result<PricingEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PricingEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PricingEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pricing_event_unchecked`.
pub fn root_as_pricing_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PricingEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PricingEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PricingEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_pricing_event_unchecked`.
pub fn size_prefixed_root_as_pricing_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PricingEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PricingEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PricingEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PricingEvent`.
pub unsafe fn root_as_pricing_event_unchecked(buf: &[u8]) -> PricingEvent {
  flatbuffers::root_unchecked::<PricingEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PricingEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PricingEvent`.
pub unsafe fn size_prefixed_root_as_pricing_event_unchecked(buf: &[u8]) -> PricingEvent {
  flatbuffers::size_prefixed_root_unchecked::<PricingEvent>(buf)
}
#[inline]
pub fn finish_pricing_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PricingEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_pricing_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PricingEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod PricingEvents
}  // pub mod Atrimo

